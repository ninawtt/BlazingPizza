@page "/checkout"
@inject OrdersClient OrdersClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@attribute [Authorize]

<div class="main">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">@errorMessage</div>
    }

    <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
            </div>
            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" disabled="@isSubmitting" type="submit">
            Place order
        </button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    bool isSubmitting;
    private string errorMessage;

    async Task PlaceOrder()
    {
        isSubmitting = true;

        try
        {
            var newOrderId = await OrdersClient.PlaceOrder(OrderState.Order);

            OrderState.ResetOrder();
            isSubmitting = false;
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            isSubmitting = false;
        }
    }
}
